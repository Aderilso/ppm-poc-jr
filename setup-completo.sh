#!/bin/bash

echo "üöÄ CONFIGURA√á√ÉO COMPLETA DO SISTEMA PPM"
echo "==========================================="
echo ""
echo "üìã Este script vai configurar TUDO automaticamente"
echo "   - Instalar depend√™ncias"
echo "   - Configurar banco de dados"
echo "   - Verificar funcionamento"
echo "   - Iniciar o sistema"
echo ""

# Verificar se estamos na pasta correta
if [ ! -f "package.json" ]; then
    echo "‚ùå ERRO: Execute este script na pasta raiz do projeto PPM"
    echo "   Pasta atual: $(pwd)"
    echo "   Procure por: package.json"
    exit 1
fi

echo "‚úÖ Pasta correta detectada"
echo ""

# Verificar Node.js
echo "üì¶ Verificando Node.js..."
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado!"
    echo ""
    echo "üîß SOLU√á√ÉO:"
    echo "1. Baixe Node.js: https://nodejs.org/"
    echo "2. Instale a vers√£o LTS (recomendada)"
    echo "3. Reinicie o terminal"
    echo "4. Execute este script novamente"
    echo ""
    exit 1
fi
echo "‚úÖ Node.js encontrado: $(node --version)"
echo ""

# Limpar instala√ß√µes anteriores (opcional)
echo "üßπ Limpando instala√ß√µes anteriores..."
if [ -d "node_modules" ]; then
    echo "   Removendo node_modules do frontend..."
    rm -rf node_modules
fi
if [ -d "server/node_modules" ]; then
    echo "   Removendo node_modules do backend..."
    rm -rf server/node_modules
fi
if [ -f "server/prisma/dev.db" ]; then
    echo "   Removendo banco de dados antigo..."
    rm server/prisma/dev.db
fi
echo "‚úÖ Limpeza conclu√≠da"
echo ""

# Instalar depend√™ncias do frontend
echo "üì¶ Instalando depend√™ncias do frontend..."
if ! npm install; then
    echo "‚ùå Erro ao instalar depend√™ncias do frontend"
    echo ""
    echo "üîß TENTE:"
    echo "1. Verificar conex√£o com internet"
    echo "2. Limpar cache: npm cache clean --force"
    echo "3. Executar novamente"
    echo ""
    exit 1
fi
echo "‚úÖ Depend√™ncias do frontend instaladas"
echo ""

# Instalar depend√™ncias do backend
echo "üì¶ Instalando depend√™ncias do backend..."
cd server
if ! npm install; then
    echo "‚ùå Erro ao instalar depend√™ncias do backend"
    cd ..
    exit 1
fi
echo "‚úÖ Depend√™ncias do backend instaladas"
cd ..
echo ""

# Configurar banco de dados
echo "üóÑÔ∏è Configurando banco de dados..."
cd server
echo "   Gerando cliente Prisma..."
if ! npx prisma generate; then
    echo "‚ùå Erro ao gerar cliente Prisma"
    cd ..
    exit 1
fi

echo "   Configurando banco de dados..."
if ! npx prisma db push; then
    echo "‚ùå Erro ao configurar banco de dados"
    cd ..
    exit 1
fi
echo "‚úÖ Banco de dados configurado"
cd ..
echo ""

# Verificar arquivos importantes
echo "üìÅ Verificando arquivos importantes..."
if [ ! -f "ppm_forms_consolidado_v2_normalizado.json" ]; then
    echo "‚ö†Ô∏è Arquivo JSON padr√£o n√£o encontrado na raiz"
    echo "   O sistema usar√° o arquivo da pasta public/"
fi
if [ -f "public/ppm_forms_consolidado_v2_normalizado.json" ]; then
    echo "‚úÖ Arquivo JSON padr√£o encontrado em public/"
fi
if [ ! -f "server/index.js" ]; then
    echo "‚ùå Arquivo do servidor n√£o encontrado"
    exit 1
fi
if [ ! -f "src/App.tsx" ]; then
    echo "‚ùå Arquivo principal do frontend n√£o encontrado"
    exit 1
fi
echo "‚úÖ Todos os arquivos importantes verificados"
echo ""

# Testar se as portas est√£o livres
echo "üîå Verificando portas..."
if lsof -i :3001 &> /dev/null; then
    echo "‚ö†Ô∏è Porta 3001 em uso - ser√° liberada automaticamente"
    pkill -f "node.*server" || true
    sleep 2
fi

if lsof -i :8080 &> /dev/null; then
    echo "‚ö†Ô∏è Porta 8080 em uso - ser√° liberada automaticamente"
    pkill -f "vite" || true
    sleep 2
fi
echo "‚úÖ Portas verificadas"
echo ""

# Iniciar backend
echo "üöÄ Iniciando backend..."
cd server
nohup npm run dev > ../backend.log 2>&1 &
BACKEND_PID=$!
cd ..
echo "‚úÖ Backend iniciado (PID: $BACKEND_PID)"
echo ""

# Aguardar backend inicializar
echo "‚è≥ Aguardando backend inicializar..."
sleep 8

# Testar API
echo "üåê Testando API..."
if curl -s http://localhost:3001/api/health > /dev/null; then
    echo "‚úÖ API respondendo corretamente"
else
    echo "‚ö†Ô∏è API ainda n√£o responde - aguardando..."
    sleep 5
    if curl -s http://localhost:3001/api/health > /dev/null; then
        echo "‚úÖ API agora est√° respondendo"
    else
        echo "‚ö†Ô∏è API pode demorar um pouco para inicializar"
    fi
fi
echo ""

# Iniciar frontend
echo "üöÄ Iniciando frontend..."
nohup npm run dev > frontend.log 2>&1 &
FRONTEND_PID=$!
echo "‚úÖ Frontend iniciado (PID: $FRONTEND_PID)"
echo ""

# Aguardar frontend inicializar
echo "‚è≥ Aguardando frontend inicializar..."
sleep 5

echo ""
echo "üéâ CONFIGURA√á√ÉO COMPLETA CONCLU√çDA!"
echo "==========================================="
echo ""
echo "‚úÖ Sistema configurado com sucesso!"
echo ""
echo "üîó URLs IMPORTANTES:"
echo "   Frontend: http://localhost:8080 (ou 8081)"
echo "   Backend API: http://localhost:3001/api"
echo "   Prisma Studio: http://localhost:5555"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "   1. Abra o navegador em: http://localhost:8080"
echo "   2. V√° em CONFIG e clique em \"Usar JSON Padr√£o\""
echo "   3. Comece a usar o sistema!"
echo ""
echo "üõ†Ô∏è COMANDOS √öTEIS:"
echo "   - Diagn√≥stico: ./diagnostico.sh"
echo "   - Reiniciar: ./reiniciar-sistema.sh"
echo "   - Limpar banco: Use o bot√£o \"Apagar Banco\" em CONFIG"
echo ""
echo "üìû SE HOUVER PROBLEMAS:"
echo "   1. Execute: ./diagnostico.sh"
echo "   2. Consulte: TROUBLESHOOTING.md"
echo "   3. Verifique os logs: backend.log e frontend.log"
echo ""
echo "üìä LOGS DO SISTEMA:"
echo "   Backend: tail -f backend.log"
echo "   Frontend: tail -f frontend.log"
echo ""
echo "‚úÖ Sistema pronto para uso!"
echo ""
